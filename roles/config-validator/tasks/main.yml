
- name: "Check for single yarn_timeline_server"
  ansible.builtin.assert:
    that: "groups['hostgroup_yarn_timeline_servers'] | length == 1"


- name: "Check for single mapreduce_history_server"
  ansible.builtin.assert:
    that: "groups['hostgroup_mapreduce_history_servers'] | length == 1"


- name: "Check for 0-1 spark_history_server"
  ansible.builtin.assert:
    that: "groups['hostgroup_spark_history_servers'] | length <= 1"

- name: "Check for single namenode when not using HDFS High Availability"
  when: "not hdfs_high_availability"
  ansible.builtin.assert:
    that: "groups['hostgroup_hdfs_namenodes'] |length  == 1"

- name: "Check for 0-1 secondary namenode when not using HDFS High Availability"
  when: "not hdfs_high_availability"
  ansible.builtin.assert:
    that: "groups['hostgroup_hdfs_secondary_namenodes'] |length <= 1"


- name: "Check for 3+ journal nodes when using HDFS High Availability"
  when: "hdfs_high_availability"
  ansible.builtin.assert:
    that: "groups['hostgroup_hdfs_journalnodes'] | length >= 3"


- name: "Check for 0 journal nodes when NOT using HDFS High Availability"
  when: "not hdfs_high_availability"
  ansible.builtin.assert:
    that: "groups['hostgroup_hdfs_journalnodes'] | length == 0"


- name: "Check for single Yarn Resourcemager when NOT using YARN High Availability"
  when: "not yarn_high_availability"
  ansible.builtin.assert:
    that: "groups['hostgroup_yarn_resource_managers'] | length == 1"


- name: "Check for 1+ zookeeper servers when NOT using High Availability"
  when: "not yarn_high_availability and not hdfs_high_availability"
  ansible.builtin.assert:
    that: "groups['hostgroup_zookeeper_servers'] | length >= 1"



- name: "Check for 3+ zookeeper servers when using High Availability"
  when: "yarn_high_availability or hdfs_high_availability"
  ansible.builtin.assert:
    that: "groups['hostgroup_zookeeper_servers'] | length >= 3"


