---

- name: Create Name dir
  file:
    path: "{{hadoop_dfs_name}}"
    state: directory
    owner: "{{hdfs_user.name}}"
    group: "{{hdfs_user.name}}"
  register: hadoop_dfs_name_dir_status

- name: check if Fresh HDFS install
  set_fact:
    fresh_HDFS: '{{hadoop_dfs_name_dir_status.changed == true and hadoop_dfs_name_dir_status.diff.before.state == "absent"}}'

- include: initialize_hdfs.yml
  when: fresh_HDFS | bool or wipe_hdfs | bool


# Start both
- name: (Re)Start namenode systemd service
  throttle: 1
  systemd:
    state: restarted
    daemon_reload: yes
    name: hdfs_namenode
    enabled: true

# Start the failover controllers
- name: (Re)Start namenode zkfc systemd service
  throttle: 1
  systemd:
    state: restarted
    daemon_reload: yes
    name: hdfs_zkfc
    enabled: true


- name: create basic directory structure
  become: yes
  become_user: "{{hdfs_user.name}}"
  shell: | #TODO make this configurable
    set -e # Fail on anything
    source /etc/profile.d/hadoop.sh
    source /etc/profile.d/kerberos.sh

    kinit -kt {{keytab_dir}}/{{hdfs_user.name}}.headless.keytab {{hdfs_user.name}}

    hdfs dfs -mkdir -p /tmp  \
        /system \
    	{{yarn_nodemanager_remote_app_log_dir}}  \
    	{{mapreduce_jobhistory_dir}} {{mapreduce_jobhistory_dir}}/done {{mapreduce_jobhistory_dir}}/tmp \
    	{{yarn_timeline_server_dir}} {{yarn_timeline_server_dir}}/active {{yarn_timeline_server_dir}}/done {{yarn_timeline_server_dir}}/generic-history \
    	{{hdfs_home_dir}};


    hdfs dfs -chmod a+rwx /tmp;

    hdfs dfs -chmod o+rx {{hdfs_home_dir}};

    hdfs dfs -chmod -R o+rx /history;

    hdfs dfs -chmod -R a+rwx {{mapreduce_jobhistory_dir}}/tmp;


    hdfs dfs -chown -R {{hdfs_user.name}}:{{hadoop_group.name}} /history;

    hdfs dfs -chown {{hdfs_user.name}}:{{hadoop_group.name}} {{hdfs_home_dir}};

    hdfs dfs -chown -R {{yarn_user.name}}:{{hadoop_group.name}} {{yarn_nodemanager_remote_app_log_dir}} {{yarn_timeline_server_dir}};

    hdfs dfs -chown -R {{mapreduce_user.name}}:{{hadoop_group.name}}  {{mapreduce_jobhistory_dir}};

    kdestroy
  when: primary|bool
