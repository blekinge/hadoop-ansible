---

- name: install rsync so we can use ansible synchronize
  package:
    name: rsync
    state: present


- name: create certificates
  become: no # Do this as {{sealbin_user}}, as this user will be used to scp(rsync) to each of the hosts to install these certs later on
  # This works because when we ssh into {{ipa_server}} as {{sealbin_user}} we use agent forwarding, and thus {{sealbin_user}}
  # will be allowed  to ssh on to any other host
  # But this will break when we become root
  block:
    #All this is done only on ipaserver host
    - name: Create ssl working dir
      file:
        path: "{{temp_ssl_dir}}/"
        state: "directory"
        mode: 0755



    - name: Generate an OpenSSL private key with a different size (2048 bits)
      community.crypto.openssl_privatekey:
        path: "{{temp_ssl_dir}}/{{ ssl_host }}-private.pem"
        size: "{{ ssl_key_size }}"
        passphrase: "{{ssl_key_pass}}"
        cipher: "auto"
        type: RSA
        state: present
      loop: '{{ groups["all"]  }}'
      loop_control:
        loop_var: "ssl_host"

    - name: Generate an OpenSSL public key in PEM format
      community.crypto.openssl_publickey:
        path: "{{temp_ssl_dir}}/{{ ssl_host }}-public.pem"
        privatekey_path: "{{temp_ssl_dir}}/{{ ssl_host }}-private.pem"
        privatekey_passphrase: "{{ssl_key_pass}}"
        state: present
      loop: '{{ groups["all"]  }}'
      loop_control:
        loop_var: "ssl_host"

    - name: Generate an OpenSSL Certificate Signing Request
      community.crypto.openssl_csr:
        path: "{{temp_ssl_dir}}/{{ ssl_host }}.csr"
        privatekey_path: "{{temp_ssl_dir}}/{{ ssl_host }}-private.pem"
        privatekey_passphrase: "{{ssl_key_pass}}"

        common_name: "{{ ssl_host }}"
        organizational_unit_name: "{{ssl_organizational_unit_name}}"
        organization_name: "{{ssl_organization_name}}"
        locality_name: "{{ssl_locality_name}}"
        state_or_province_name: "{{ssl_state_or_province_name}}"
        country_name: "{{ssl_country_name}}"
      loop: '{{ groups["all"]  }}'
      loop_control:
        loop_var: "ssl_host"

    - community.crypto.x509_certificate:
        path: "{{temp_ssl_dir}}/{{ ssl_host }}.crt"
        privatekey_path: "{{temp_ssl_dir}}/{{ ssl_host }}-private.pem"
        privatekey_passphrase: "{{ssl_key_pass}}"
        csr_path: "{{temp_ssl_dir}}/{{ ssl_host }}.csr"
        provider: selfsigned
      loop: '{{ groups["all"]  }}'
      loop_control:
        loop_var: "ssl_host"

    - name: ensure nessesary python openssl library
      become: yes
      package:
        name: python3-pyOpenSSL
        state: present

    - name: "Generate PKCS#12 file"
      community.crypto.openssl_pkcs12:
        action: export
        friendly_name: "{{ ssl_host }}"
        certificate_path: "{{temp_ssl_dir}}/{{ ssl_host }}.crt"

        path: "{{temp_ssl_dir}}/{{ ssl_host }}-keystore.p12"
        passphrase: "{{ ssl_keystore_pass }}"

        privatekey_path: "{{temp_ssl_dir}}/{{ ssl_host }}-private.pem"
        privatekey_passphrase: "{{ssl_key_pass}}"

        state: present
      loop: '{{ groups["all"]  }}'
      loop_control:
        loop_var: "ssl_host"

    - name: Import the certificate to the key store file.
      command: "keytool -importkeystore
                -srckeystore {{temp_ssl_dir}}/{{ ssl_host }}-keystore.p12
                -srcstoretype PKCS12
                -srcstorepass {{ ssl_keystore_pass | quote }}
                -destkeystore {{temp_ssl_dir}}/{{ ssl_host }}-keystore.jks
                -deststoretype JKS
                -storepass {{ ssl_keystore_pass | quote}}"
      args:
        creates: "{{temp_ssl_dir}}/{{ ssl_host }}-keystore.jks"
      loop: '{{ groups["all"]  }}'
      loop_control:
        loop_var: "ssl_host"


    - name: Import the certificate to the trust store file.
      community.general.java_cert:
        cert_alias: "{{ ssl_host }}"
        cert_path: "{{temp_ssl_dir}}/{{ ssl_host }}.crt"
        keystore_create: yes
        keystore_pass: "{{ ssl_truststore_pass  }}"
        keystore_path: "{{temp_ssl_dir}}/{{ ssl_host }}-truststore.jks"
      loop: '{{ groups["all"]  }}'
      loop_control:
        loop_var: "ssl_host"

    - name: Create a single trust store file that contains the public key from all certificates.
      community.general.java_cert:
        cert_alias: "{{ ssl_host }}"
        cert_path: "{{temp_ssl_dir}}/{{ ssl_host }}.crt"
        keystore_create: yes
        keystore_pass: "{{ ssl_truststore_pass  }}"
        keystore_path: "{{temp_ssl_dir}}/all.jks"
      # keytool -import -noprompt -alias nn1.hadoop.com -file nn1.crt -keystore truststore.jks -storepass host@123
      loop: '{{ groups["all"]  }}'
      loop_control:
        loop_var: "ssl_host"


    - name: Create http secret.
      command: "dd if=/dev/urandom of={{temp_ssl_dir}}/http_secret bs=1024 count=1"
      args:
        creates: "{{temp_ssl_dir}}/http_secret"

