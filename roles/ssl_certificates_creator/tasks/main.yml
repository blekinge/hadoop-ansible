---

- name: install rsync so we can use ansible synchronize
  package:
    name: rsync
    state: present


- name: create certificates
  become: no # Do this as {{sealbin_user}}, as this user will be used to scp(rsync) to each of the hosts to install these certs later on
  # This works because when we ssh into {{ipa_server}} as {{sealbin_user}} we use agent forwarding, and thus {{sealbin_user}}
  # will be allowed  to ssh on to any other host
  # But this will break when we become root
  block:
    #All this is done only on ipaserver host
    - name: Create ssl working dir
      file:
        path: "{{temp_ssl_dir}}/"
        state: "directory"
        mode: 0755

    # TODO use real certificates...
    # Created from https://getthekt.com/securing-hadoop-cluster-part-1-ssltls-for-hdfs-and-yarn/
    - name: Create server ssl key
      command: 'keytool -genkey -alias  {{ ssl_host | quote }} -keyalg rsa -keysize {{ ssl_key_size | quote }} -dname "CN={{ ssl_host }},OU=demo,O=MyOrg,L=Pune,ST=MH,C=IN" -keypass {{ ssl_key_pass | quote }} -keystore {{temp_ssl_dir}}/{{ ssl_host }}-keystore.jks -storepass {{ ssl_keystore_pass | quote}}'
    # keytool -genkey -alias nn1.hadoop.com -keyalg rsa -keysize 1024 -dname “CN=nn1.hadoop.com,OU=demo,O=MyOrg,L=Pune,ST=MH,C=IN” -keypass host@123 -keystore nn1-keystore.jks -storepass host@123
      args:
        creates: "{{temp_ssl_dir}}/{{ ssl_host }}-keystore.jks"
      loop: '{{ groups["all"]  }}'
      loop_control:
        loop_var: "ssl_host"


    - name: Export the certificate public key to a certificate file
      command: "keytool -export -alias {{ ssl_host }} -keystore {{temp_ssl_dir}}/{{ ssl_host }}-keystore.jks -rfc -file {{temp_ssl_dir}}/{{ ssl_host }}.crt -storepass {{ ssl_keystore_pass | quote }}"
    # keytool -export -alias nn1.hadoop.com -keystore nn1-keystore.jks -rfc -file nn1.crt -storepass host@123
      args:
        creates: "{{temp_ssl_dir}}/{{ ssl_host }}.crt"
      loop: '{{ groups["all"]  }}'
      loop_control:
          loop_var: "ssl_host"

    - name: Import the certificate to the trust store file.
      command: "keytool -import -noprompt -alias {{ ssl_host }} -file {{temp_ssl_dir}}/{{ ssl_host }}.crt -keystore {{temp_ssl_dir}}/{{ ssl_host }}-truststore.jks -storepass {{ ssl_truststore_pass | quote }}"
    # keytool -import -noprompt -alias nn1.hadoop.com -file nn1.crt -keystore nn1-truststore.jks -storepass host@123
      args:
        creates: "{{temp_ssl_dir}}/{{ ssl_host }}-truststore.jks"
      loop: '{{ groups["all"]  }}'
      loop_control:
          loop_var: "ssl_host"

    - name: Create a single trust store file that contains the public key from all certificates.
      shell: |
        keytool -list -keystore {{temp_ssl_dir}}/all.jks  -storepass {{ ssl_truststore_pass | quote }}  -alias {{ ssl_host  }} ||
        keytool -import -noprompt -alias {{ ssl_host | quote }} -file {{temp_ssl_dir}}/{{ ssl_host  }}.crt -keystore {{temp_ssl_dir}}/all.jks -storepass {{ ssl_truststore_pass | quote }}
      # keytool -import -noprompt -alias nn1.hadoop.com -file nn1.crt -keystore truststore.jks -storepass host@123
      loop: '{{ groups["all"]  }}'
      loop_control:
          loop_var: "ssl_host"


    - name: Create http secret.
      command: "dd if=/dev/urandom of={{temp_ssl_dir}}/http_secret bs=1024 count=1"
      args:
        creates: "{{temp_ssl_dir}}/http_secret"

