---

- name: install rsync so we can use ansible synchronize
  package:
    name: rsync
    state: present


- name: create certificates
  become: no # Do this as {{sealbin_user}}, as this user will be used to scp(rsync) to each of the hosts to install these certs later on
  # This works because when we ssh into {{ipa_server}} as {{sealbin_user}} we use agent forwarding, and thus {{sealbin_user}}
  # will be allowed  to ssh on to any other host
  # But this will break when we become root
  vars:
    CA_name: CA
  block:
    - name: "ensure nessesary python openssl library"
      become: yes
      package:
        name: python3-pyOpenSSL
        state: present

    #All this is done only on ipaserver host
    - name: Create ssl working dir
      file:
        path: "{{temp_ssl_dir}}/"
        state: "directory"
        mode: 0755

    - name: "CA: Generate an OpenSSL private key in PEM format"
      community.crypto.openssl_privatekey:
        path: "{{temp_ssl_dir}}/{{ CA_name }}-private.pem"

        size: "{{ ssl_key_size }}"
        passphrase: "{{ssl_ownca_pass}}"
        cipher: "auto"
        type: RSA
        state: present

    - name: "CA: Generate an OpenSSL Certificate Signing Request"
      community.crypto.openssl_csr:
        path: "{{temp_ssl_dir}}/{{ CA_name }}.csr"

        privatekey_path: "{{temp_ssl_dir}}/{{ CA_name }}-private.pem"
        privatekey_passphrase: "{{ssl_ownca_pass}}"

        common_name: "{{ CA_name }}"
        organizational_unit_name: "{{ssl_organizational_unit_name | default(omit)}}"
        organization_name: "{{ssl_organization_name | default(omit)}}"
        locality_name: "{{ssl_locality_name | default(omit)}}"
        state_or_province_name: "{{ssl_state_or_province_name | default(omit)}}"
        country_name: "{{ssl_country_name | default(omit)}}"


    - name: "{{ssl_host}}: Create the actual certificate"
      community.crypto.x509_certificate:
        path: "{{temp_ssl_dir}}/{{ CA_name }}.crt"

        privatekey_path: "{{temp_ssl_dir}}/{{ CA_name }}-private.pem"
        privatekey_passphrase: "{{ssl_ownca_pass}}"
        csr_path: "{{temp_ssl_dir}}/{{ CA_name }}.csr"
        provider: selfsigned

    # Result all.jks
    - name: "{{ssl_host}}: Create a single trust store file that contains parent certificate."
      community.general.java_cert:
        cert_alias: "{{ CA_name }}"
        cert_path: "{{temp_ssl_dir}}/{{CA_name}}.crt"
        keystore_create: yes
        keystore_pass: "{{ ssl_truststore_pass  }}"
        keystore_path: "{{temp_ssl_dir}}/all.jks"

    - name: "Create certificate for each host"
      include_tasks: createCertificate.yml
      loop: '{{ groups["all"]  }}'
      loop_control:
        loop_var: "ssl_host"

    - name: Create http secret.
      command: "dd if=/dev/urandom of={{temp_ssl_dir}}/http_secret bs=1024 count=1"
      args:
        creates: "{{temp_ssl_dir}}/http_secret"

