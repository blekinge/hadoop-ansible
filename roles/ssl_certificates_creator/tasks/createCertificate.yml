---
#vars: ssl_host
# Output are the files
# *-keystore.jks"
# *-keystore.p12"

#Intermediate result
# Generate a private key for host {{ssl_host}}
- name: "{{ssl_host}}: Generate an OpenSSL private key in PEM format"
  community.crypto.openssl_privatekey:
    path: "{{temp_ssl_dir}}/{{ ssl_host }}-private.pem"

    size: "{{ ssl_key_size }}"
    passphrase: "{{ssl_key_pass}}"
    cipher: "auto"
    type: RSA
    state: present

# As (via private key) {{ssl_host}} request a certificate (create a certificate signing request)
- name: "{{ssl_host}}: Generate an OpenSSL Certificate Signing Request"
  community.crypto.openssl_csr:
    path: "{{temp_ssl_dir}}/{{ ssl_host }}.csr"

    privatekey_path: "{{temp_ssl_dir}}/{{ ssl_host }}-private.pem"
    privatekey_passphrase: "{{ssl_key_pass}}"

    common_name: "{{ ssl_host }}"
    organizational_unit_name: "{{ssl_organizational_unit_name | default(omit)}}"
    organization_name: "{{ssl_organization_name | default(omit)}}"
    locality_name: "{{ssl_locality_name | default(omit)}}"
    state_or_province_name: "{{ssl_state_or_province_name | default(omit)}}"
    country_name: "{{ssl_country_name | default(omit)}}"


# As parent, sign the incoming certificate request for {{ssl_host}}
- name: "{{ssl_host}}: Create the actual certificate"
  community.crypto.x509_certificate:
    path: "{{temp_ssl_dir}}/{{ ssl_host }}.crt"

    csr_path: "{{temp_ssl_dir}}/{{ ssl_host }}.csr"
    provider: ownca
    ownca_path: "{{temp_ssl_dir}}/{{CA_name}}.crt"
    ownca_privatekey_path: "{{temp_ssl_dir}}/{{CA_name}}-private.pem"
    ownca_privatekey_passphrase: "{{ssl_ownca_pass}}"

# Result -keystore.p12
# Depends on .crt
# Depends on -private.pem
- name: "{{ssl_host}}: Generate PKCS#12 file"
  community.crypto.openssl_pkcs12:
    action: export
    friendly_name: "{{ ssl_host }}"
    certificate_path: "{{temp_ssl_dir}}/{{ ssl_host }}.crt"

    path: "{{temp_ssl_dir}}/{{ ssl_host }}-keystore.p12"
    passphrase: "{{ ssl_keystore_pass }}"

    privatekey_path: "{{temp_ssl_dir}}/{{ ssl_host }}-private.pem"
    privatekey_passphrase: "{{ssl_key_pass}}"

    state: present

# Result -keystore.jks
# Depends on -keystore.p12
- name: "{{ssl_host}}: Import the certificate to the key store file."
  command: "keytool -importkeystore
                -srckeystore {{temp_ssl_dir}}/{{ ssl_host }}-keystore.p12
                -srcstoretype PKCS12
                -srcstorepass {{ ssl_keystore_pass | quote }}
                -destkeystore {{temp_ssl_dir}}/{{ ssl_host }}-keystore.jks
                -deststoretype JKS
                -storepass {{ ssl_keystore_pass | quote}}"
  args:
    creates: "{{temp_ssl_dir}}/{{ ssl_host }}-keystore.jks"
