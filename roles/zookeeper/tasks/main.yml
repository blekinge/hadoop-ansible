---
- name: ensure zookeeper directory exists
  file:
    path: "{{ zookeeper_path }}"
    state: directory

- name: Unzip Zookeeper
  unarchive:
    src: "{{ zookeeper_download }}"
    dest: "{{ zookeeper_path }}"
    remote_src: yes
    creates: "{{ zookeeper_path }}/zookeeper-{{ zookeeper_version }}"
    group: "{{ hadoop_group }}"
    owner: "root"


- name: Create Zookeeper Paths
  file:
    path: "{{ item }}"
    owner: "{{ zookeeper_user }}"
    group: "{{ hadoop_group }}"
    state: directory
    mode: 0755
  with_items:
    - "{{ zookeeper_create_path }}"


- name: Copy zookeeper-env.sh
  template: src=zookeeper-env.sh dest={{ zookeeper_config_path }}/ mode=0644 owner=root group = {{ hadoop_group }}


- name: Copy log4j.properties
  template: src=log4j.properties dest={{ zookeeper_config_path }}/ mode=0644 owner=root group = {{ hadoop_group }}


- name: Copy zoo.cfg
  template: src=zoo.cfg dest={{ zookeeper_config_path }}/ mode=0644 owner=root group = {{ hadoop_group }}

- name: Copy zookeeper systemd service
  template: src=systemd_zookeeper.service dest=/etc/systemd/system/zookeeper.service mode=0644 owner="root" group="root"
  when: zookeeper_server

- name: zookeeper_id
  template: src=myid dest={{zookeeper_data_dir}}/myid mode=0644 owner="root" group="root"
  when: zookeeper_server

- name: Start zookeeper server
  systemd:
    state: started
    daemon_reload: yes
    name: zookeeper
  when: zookeeper_server and start
