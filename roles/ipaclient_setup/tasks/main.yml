---

- name: remove other ntp servers from chrony.conf
  lineinfile:
    path: /etc/chrony.conf
    state: absent
    regexp: "^(server|pool).*"
  notify: "restart chronyd"

#TODO only do this if ipaclient_ntp_pool is actually defined
- name: setup chronyd to use ntp
  lineinfile:
    path: /etc/chrony.conf
    line: "pool {{ ipaclient_ntp_pool }} iburst"
    insertafter: "^# Please consider joining the pool .*"
    state: present
  notify: "restart chronyd"

- name: set correct timezone
  timezone:
    name: Europe/Copenhagen


- name: "Setup autocreation of homedirs"
#  TODO why is this not triggered here?
  when: ipaclient_mkhomedir
  become: yes
  command:
    cmd: authselect enable-feature with-mkhomedir

- name: "Ensure oddjobd.service"
  when: ipaclient_mkhomedir
  systemd:
    name: oddjobd
    enabled: yes
    state: started


- name: Setup autohomes
  when: use_autofs_homes
  block:
    - name: "create {{ ipaclient_autohome_dir }}"
      file:
          path: "{{ ipaclient_autohome_dir }}"
          state: directory
          mode: '0755'

    - name: check for autofs in /etc/sssd/sssd.conf
      shell:
        cmd: grep '^services *=' /etc/sssd/sssd.conf | grep -q autofs
      register: autofsEnabled
      failed_when: autofsEnabled.rc >= 2
      changed_when: autofsEnabled.rc == 1

    - name: setup automount as the ipaclient module did not do it correctly
      when: autofsEnabled.rc == 1
      replace:
        path: /etc/sssd/sssd.conf
        regexp: '^(services *= *[^\n]*)$'
        replace: '\1, autofs'
      register: service_autofs_changed


    - name: check for homedir in /etc/sssd/sssd.conf
      shell:
        cmd: grep '^homedir_substring *=' /etc/sssd/sssd.conf | grep -v -q '= */home *$'
      register: homedirCorrect
      failed_when: homedirCorrect.rc >= 2
      changed_when: homedirCorrect.rc == 1

    - name: setup homedir as the ipaclient module did not do it correctly
      when: homedirCorrect.rc == 1
      replace:
        path: /etc/sssd/sssd.conf
        regexp: '^homedir_substring *= [^\n]*$'
        replace: 'homedir_substring = {{ ipaclient_autohome_dir }}'
      register: homedir_substring_changed


    - name: add missing automount config to /etc/sssd/sssd.conf
      lineinfile:
        path: /etc/sssd/sssd.conf
        line: autofs_provider = ipa
        insertbefore: '^\[sssd\]$'
      register: autofs_provider_changed

    - name: add missing automount config to /etc/sssd/sssd.conf
      lineinfile:
        path: /etc/sssd/sssd.conf
        line: ipa_automount_location = default
        insertbefore: '^\[sssd\]$'
      register: automount_location_changed

    - name: restart sssd after changes in /etc/sssd/sssd.conf
      when: autofs_provider_changed.changed or
        automount_location_changed.changed or
        homedir_substring_changed.changed or
        service_autofs_changed.changed
      systemd:
        service: sssd
        state: restarted

    - name: Restart autofs and enable it
      systemd:
        service: autofs
        state: restarted
        enabled: yes


- name: "Mount {{ ipaclient_syshome_dir }}"
  when: use_nfs_syshomes
  mount:
    path: "{{ ipaclient_syshome_dir }}"
    src: "{{ ipa_server }}:{{ ipaserver_syshome_dir }}"
    fstype: "nfs4"
    opts: "rw,defaults,_netdev,hard,intr,_netdev"
    state: mounted


- name: ensure ipa is reloaded
  shell:
    cmd: sss_cache -E
  changed_when: false

- name: set correct ccache
  replace:
    path: /etc/krb5.conf
    regexp: 'default_ccache_name.*'
    replace: 'default_ccache_name = /tmp/krb5cc_%{uid}'

- name: set correct ccache 2
  replace:
    path: /etc/krb5.conf.d/kcm_default_ccache
    regexp: '^( *default_ccache_name *= *KCM: *)'
    replace: '#\1'

- name: stop sssd KCM service
  systemd:
    state: stopped
    service: sssd-kcm.service
    enabled: no

- name: stop sssd KCM socket service
  systemd:
    state: stopped
    service: sssd-kcm.socket
    enabled: no

- name: restart sssd service
  systemd:
    state: restarted
    service: sssd.service
    enabled: yes


- name: Upload Kerberos profile files
  template:
    src: "{{ item }}"
    dest: "/etc/profile.d/"
    mode: 0644
    owner: "root"
    group: "root"
  with_fileglob:
    - "templates/*"


- name: "Create cluster hostgroup {{ ipa_hostgroup | default(domain) }}"
  delegate_to: "{{ groups['hostgroup_ipaserver'] | first }}"
  run_once: true
  freeipa.ansible_freeipa.ipahostgroup:
    ipaadmin_password: "{{ ipaadmin_password }}"
    name: "{{ ipa_hostgroup | default(domain) }}"
    action: hostgroup

- name: "Put hosts in cluster hostgroup {{ ipa_hostgroup | default(domain) }}"
  delegate_to: "{{ groups['hostgroup_ipaserver'] | first }}"
  register: hostgroup_addition_result
  failed_when:
    - "hostgroup_addition_result.failed"
    - "'This entry is already a member' not in hostgroup_addition_result.msg"
  freeipa.ansible_freeipa.ipahostgroup:
    ipaadmin_password: "{{ ipaadmin_password }}"
    name: "{{ ipa_hostgroup | default(domain) }}"
    action: member
    host:
      - "{{ ansible_hostname }}"
