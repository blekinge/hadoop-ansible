---

- name: Stop namenode systemd service
  ansible.builtin.systemd:
    state: stopped
    daemon_reload: yes
    name: hdfs_namenode


- name: Wipe Namenode
  ansible.builtin.file:
    path: "{{hadoop_dfs_name}}"
    state: absent


- name: Create Hadoop Namenode directories
  ansible.builtin.file:
    path: "{{ item }}"
    owner: "{{ hdfs_user.name }}"
    group: "{{ hdfs_user.group }}"
    state: directory
  loop:
    - "{{ hadoop_pid_dir }}/{{ hdfs_user.name }}"
    - "{{ hadoop_log_dir }}/{{ hdfs_user.name }}"
    - "{{ hadoop_dfs_name }}"


#On the primary, format the filesystem
- name: Format Namenode
  become: yes
  become_user: "{{hdfs_user.name}}"
  shell:
    cmd:
      echo -e "Y\nN" | /usr/local/bin/hadoop-invoker.sh hdfs hadoop-env.sh namenode -format > "{{ hadoop_dfs_name }}/formatted"
    executable: /bin/bash
    creates: "{{ hadoop_dfs_name }}/formatted"
  ignore_errors: yes
  when: primary|bool

# Initialize the shared edits
- name: Initialize shared edit
  become: yes
  become_user: "{{hdfs_user.name}}"
  shell:
    cmd:
      echo -e "Y\nN" | /usr/local/bin/hadoop-invoker.sh hdfs hadoop-env.sh namenode -initializeSharedEdits > "{{ hadoop_dfs_name }}/shared_edits_initialized"
    executable: /bin/bash
    creates: "{{ hadoop_dfs_name }}/shared_edits_initialized"
  ignore_errors: yes
  when: primary|bool

# Then start the primary, so the secondary will have something to sync with
- name: (Re)Start Primary Namenode systemd service
  ansible.builtin.systemd:
    state: restarted
    daemon_reload: yes
    name: hdfs_namenode
    enabled: true
  when: primary|bool


- name: Stop Secondary Namenode systemd service
  ansible.builtin.systemd:
    state: stopped
    daemon_reload: yes
    name: hdfs_namenode
    enabled: true
  when: not (primary | bool)


# Sync the secondary namenode
- name: Bootstrap HA
  become: yes
  become_user: "{{hdfs_user.name}}"
  shell:
    cmd:
      echo -e "Y\n" | /usr/local/bin/hadoop-invoker.sh hdfs hadoop-env.sh namenode -bootstrapStandby > "{{ hadoop_dfs_name }}/bootstrapped"
    executable: /bin/bash
    creates: "{{ hadoop_dfs_name }}/bootstrapped"
  when: not (primary | bool)


- name: Stop ZKFC
  ansible.builtin.systemd:
    state: stopped
    daemon_reload: yes
    name: hdfs_zkfc
    enabled: true
  when: primary | bool

# And format the zkfc
- name: Format zkfc
  become: yes
  become_user: "{{hdfs_user.name}}"
  shell:
    cmd:
      echo -e "Y\nN" | /usr/local/bin/hadoop-invoker.sh hdfs hadoop-env.sh zkfc -formatZK > "{{ hadoop_dfs_name }}/zkFormatted"
    executable: /bin/bash
    creates: "{{ hadoop_dfs_name }}/zkFormatted"
  when: primary|bool
