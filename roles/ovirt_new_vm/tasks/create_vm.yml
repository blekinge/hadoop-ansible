---

- name: setup vm
  delegate_to: localhost
  connection: local
  become: no
  throttle: 1
  block:
    # This DNS looks up the vm to determine it's configured IP address
    # Fun note: The VM does not have to exist yet, as long as it is in DNS
    - name: "Simple A record (IPV4 address) lookup for {{hostname}}"
      shell: "host {{hostname}} {{dns_server}} | grep '{{hostname}}' | cut -d' ' -f4 | cut -d'.' -f4"
      register: hostnumberblob


    # Save the hostnumber as variable; Hostnumber is the last block of the IP, as this is alike in all the networks
    - set_fact:
        hostnumber: "{{ hostnumberblob.stdout }}"

    - debug:
        var: hostnumber

    # The use of ovirt.ovirt before ovirt_auth is to check if the collection is correctly loaded
    - name: Obtain SSO token with using username/password credentials
      ovirt.ovirt.ovirt_auth:
        url: "https://{{ovirt_api_host}}/ovirt-engine/api"
        username: "{{ovirt_username}}"
        password: "{{ ovirt_password }}"

    # Previous task generated I(ovirt_auth) fact, which you can later use
    # in different modules as follows:

    - name: "Creating vm {{shortname}}"
      ovirt.ovirt.ovirt_vm:
        auth: "{{ ovirt_auth }}"
        state: present
        name: "{{shortname}}"
        template: "{{template}}"
        clone: yes
        cluster: "{{ovirt_cluster}}"

        memory: "{{memory}}"
        memory_guaranteed: "{{memory}}"
        cpu_sockets: "{{cpu_sockets}}"
        cpu_cores: "{{cpu_cores}}"
        comment: "{{comment | default(omit)}}"
        description: "{{description | default(omit)}}"
#        cloud_init_persist: True
#
#        cloud_init:
#          host_name: "{{hostname}}"
#          timezone: "GMT+01:00"
#
#        cloud_init_nics:
#          - nic_name: ens3
#            nic_boot_protocol: static
#            nic_ip_address: "{{nic1_subnet}}.{{hostnumber}}"
#            nic_netmask: 255.255.255.0
#            nic_gateway: "{{gateway}}"
#            nic_on_boot: True
#          - nic_name: ens4
#            nic_boot_protocol: static
#            nic_ip_address: "{{nic2_subnet}}.{{hostnumber}}"
#            nic_netmask: 255.255.255.0
#            nic_on_boot: True


    - name: "create extra disks for {{shortname}}"
      when: host_disks is defined
      loop: "{{ host_disks }}"
      register: attached_disks
      ovirt.ovirt.ovirt_disk:
        auth: "{{ ovirt_auth }}"
        activate: yes
        bootable: no
        content_type: data
        format: cow
        interface: "virtio_scsi"
        name: "{{shortname}}_{{item.name}}"
        shareable: no
        sparse: yes
        size: "{{item.size}}"
        state: present
        storage_domain: "VMs"
        vm_name: "{{shortname}}"
        wait: yes
      no_log: true

    - name: "create {{nic1}} nic"
      ovirt.ovirt.ovirt_nic:
        auth: "{{ ovirt_auth }}"
        state: present
        vm: "{{shortname}}"
        name: nic1
        profile: "{{nic1}}"
        network: "{{nic1}}"
      register: nic1_added

    - name: "create {{nic2}} nic"
      ovirt.ovirt.ovirt_nic:
        auth: "{{ ovirt_auth }}"
        state: present
        vm: "{{shortname}}"
        name: nic2
        profile: "{{nic2}}"
        network: "{{nic2}}"
      register: nic2_added

    - name: "Starting vm {{shortname}}"
      ovirt.ovirt.ovirt_vm:
        auth: "{{ ovirt_auth }}"
        state: running
        name: "{{shortname}}"
        cluster: "{{ovirt_cluster}}"
#        cloud_init_persist: True
#
#        cloud_init:
#          host_name: "{{hostname}}"
#          timezone: "GMT+01:00"
#
#        cloud_init_nics:
#          - nic_name: ens3
#            nic_boot_protocol: static
#            nic_ip_address: "{{nic1_subnet}}.{{hostnumber}}"
#            nic_netmask: 255.255.255.0
#            nic_gateway: "{{gateway}}"
#            nic_on_boot: True
#          - nic_name: ens4
#            nic_boot_protocol: static
#            nic_ip_address: "{{nic2_subnet}}.{{hostnumber}}"
#            nic_netmask: 255.255.255.0
#            nic_on_boot: True

      #TODO test if the host is available on the right IP before doing this
    - name: setup network
#      when: nic1_added.changed or nic2_added.changed
      include_tasks: setup_network.yml

    - name: "Ensure vm is started"
      ovirt.ovirt.ovirt_vm:
        auth: "{{ ovirt_auth }}"
        state: running
        name: "{{shortname}}"
        cluster: "{{ovirt_cluster}}"
        wait: yes

  always:
    - name: Always revoke the SSO token
      ovirt_auth:
        state: absent
        ovirt_auth: "{{ ovirt_auth }}"
