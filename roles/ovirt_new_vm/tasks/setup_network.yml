
- name: "Test if host {{inventory_hostname}} is reachable/usable"
  delegate_to: "{{inventory_hostname}}"
  remote_user: root
  become: yes
  become_user: root
  timeout: 5
  shell:
    cmd: hostname
  register: available_on_inventory_hostname
  ignore_errors: yes


- ansible.builtin.set_fact:
    delegation: "{{ inventory_hostname if available_on_inventory_hostname is not failed else new_vm_ip}}"

- name: Setup networks
  become: yes
  become_user: root
  remote_user: root
  delegate_to: "{{ delegation }}"

  block:
    - name: "Wait 600 seconds for host {{ delegation }} to become reachable/usable"
      delegate_to: "{{ delegation }}"
      ansible.builtin.wait_for_connection:
        delay: 0 # Number of seconds to wait before starting to poll.
        timeout: 600 # Maximum number of seconds to wait for.
        sleep: 2 # Number of seconds to sleep between checks.
        connect_timeout: 5 # Maximum number of seconds to wait for a connection to happen before closing and retrying.

    # There is almost certainly a better way of doing this but this works
    - name: "Set hostname to {{hostname}}"
      ansible.builtin.hostname:
        name: "{{hostname}}"
#        use: systemd

    - name: "Setup wonky ping systemd service"
      ansible.builtin.template:
        src: "activate_network.service"
        dest: /etc/systemd/system/
        mode: 0644
        owner: "root"
        group: "root"

    - name: "Enable wonky ping systemd service"
      ansible.builtin.systemd:
        name: activate_network.service
        state: stopped
        daemon_reload: yes
        enabled: true


    - name: "Find existing network scripts"
      ansible.builtin.find:
        paths: "/etc/sysconfig/network-scripts/"
      register: existing_network_scripts

    - name: "delete network scripts not on list {{network_scripts | map(attribute='name') | list | join(',')}}"
      ansible.builtin.file:
        path: "{{item.path}}"
        state: absent
      when: item.path|basename not in (network_scripts | map(attribute='name') | list )
      loop: "{{existing_network_scripts.files|default([ ])}}"

    - name: "Update network config scripts"
      ansible.builtin.template:
        src: "{{item.file}}"
        dest: "/etc/sysconfig/network-scripts/{{item.name}}"
        mode: 0644
        owner: "root"
        group: "root"
      loop: "{{network_scripts | default([])}}"


    - name: Fix selinux permissions
      when: ansible_selinux.mode == 'enforcing'
      command: "restorecon -R -v /etc/sysconfig/network-scripts/"

    - name: "Start and enable NetworkManager"
      ansible.builtin.systemd:
        name: NetworkManager
        state: started
        enabled: yes

    - name: "Reload NetworkManager to activate new networks"
      command: nmcli con reload
      ignore_unreachable: yes

