
- name: "Test if host {{inventory_hostname}} is reachable/usable"
  delegate_to: "{{inventory_hostname}}"
  remote_user: root
  become: yes
  become_user: root
  timeout: 5
  shell: hostname
  register: available_on_inventory_hostname
  ignore_errors: yes


- set_fact:
    delegation: "{{ inventory_hostname if available_on_inventory_hostname is not failed else new_vm_ip}}"

- name: Setup networks
  become: yes
  become_user: root
  remote_user: root
  delegate_to: "{{ delegation }}"

  block:
    - name: "Wait 600 seconds for host {{ delegation }} to become reachable/usable"
      delegate_to: "{{ delegation }}"
      wait_for_connection:
        delay: 0 # Number of seconds to wait before starting to poll.
        timeout: 600 # Maximum number of seconds to wait for.
        sleep: 2 # Number of seconds to sleep between checks.
        connect_timeout: 5 # Maximum number of seconds to wait for a connection to happen before closing and retrying.

    # There is almost certainly a better way of doing this but this works
    - name: "Set hostname to {{hostname}}"
      ansible.builtin.hostname:
        name: "{{hostname}}"
#        use: systemd

    - name: "Setup wonky ping systemd service"
      template:
        src: "activate_network.service"
        dest: /etc/systemd/system/
        mode: 0644
        owner: "root"
        group: "root"

    - name: "Enable wonky ping systemd service"
      systemd:
        name: activate_network.service
        state: stopped
        daemon_reload: yes
        enabled: true


    - name: "setup network {{nic1}}"
      command: >
        nmcli con add
          type ethernet
          con-name "{{nic1}}"
          ifname ens3
          ipv4.method manual
          ipv4.addresses "{{nic1_subnet}}.{{hostnumber}}/24"
          ipv4.dns "{{dns1}},{{dns2}}"
          ipv4.dns-search "{{dns_search_domains}}"
          ipv4.gateway "{{gateway}}"

    - name: "setup network {{nic2}}"
      command: >
        nmcli con add
          type ethernet
          con-name "{{nic2}}"
          ifname ens4
          ipv4.method manual
          ipv4.addresses "{{nic2_subnet}}.{{hostnumber}}/24"
          ipv4.routes "{{nic2_routes}}"

    - name: "remove old networks ens4"
      community.general.nmcli:
        conn_name: 'ens4'
        state: absent

    - name: "remove old networks ens3"
      community.general.nmcli:
        conn_name: 'ens3'
        state: absent
      ignore_unreachable: yes


